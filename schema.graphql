### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Alert {
  check: Boolean!
  createdAt: DateTime!
  id: Int!
  message: String!
  type: AlertType!
  user: User!
  userId: Int!
}

input AlertCreateManyWithoutUserInput {
  connect: [AlertWhereUniqueInput!]
  connectOrCreate: [AlertCreateOrConnectWithoutuserInput!]
  create: [AlertCreateWithoutUserInput!]
}

input AlertCreateOrConnectWithoutuserInput {
  create: AlertCreateWithoutUserInput!
  where: AlertWhereUniqueInput!
}

input AlertCreateWithoutUserInput {
  check: Boolean
  createdAt: DateTime
  message: String!
  type: AlertType!
}

input AlertListRelationFilter {
  every: AlertWhereInput
  none: AlertWhereInput
  some: AlertWhereInput
}

input AlertScalarWhereInput {
  AND: [AlertScalarWhereInput!]
  check: BoolFilter
  createdAt: DateTimeFilter
  id: IntFilter
  message: StringFilter
  NOT: [AlertScalarWhereInput!]
  OR: [AlertScalarWhereInput!]
  type: EnumAlertTypeFilter
  userId: IntFilter
}

enum AlertType {
  COMMENT
  LIKE
}

input AlertUpdateManyMutationInput {
  check: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  type: EnumAlertTypeFieldUpdateOperationsInput
}

input AlertUpdateManyWithoutUserInput {
  connect: [AlertWhereUniqueInput!]
  connectOrCreate: [AlertCreateOrConnectWithoutuserInput!]
  create: [AlertCreateWithoutUserInput!]
  delete: [AlertWhereUniqueInput!]
  deleteMany: [AlertScalarWhereInput!]
  disconnect: [AlertWhereUniqueInput!]
  set: [AlertWhereUniqueInput!]
  update: [AlertUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AlertUpdateManyWithWhereWithoutUserInput!]
  upsert: [AlertUpsertWithWhereUniqueWithoutUserInput!]
}

input AlertUpdateManyWithWhereWithoutUserInput {
  data: AlertUpdateManyMutationInput!
  where: AlertScalarWhereInput!
}

input AlertUpdateWithoutUserInput {
  check: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  type: EnumAlertTypeFieldUpdateOperationsInput
}

input AlertUpdateWithWhereUniqueWithoutUserInput {
  data: AlertUpdateWithoutUserInput!
  where: AlertWhereUniqueInput!
}

input AlertUpsertWithWhereUniqueWithoutUserInput {
  create: AlertCreateWithoutUserInput!
  update: AlertUpdateWithoutUserInput!
  where: AlertWhereUniqueInput!
}

input AlertWhereInput {
  AND: [AlertWhereInput!]
  check: BoolFilter
  createdAt: DateTimeFilter
  id: IntFilter
  message: StringFilter
  NOT: [AlertWhereInput!]
  OR: [AlertWhereInput!]
  type: EnumAlertTypeFilter
  user: UserWhereInput
  userId: IntFilter
}

input AlertWhereUniqueInput {
  id: Int
}

type AuthPayload {
  avatar: String
  login: String
}

type BatchPayload {
  count: Int!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type CastFetch {
  character: String!
  id: Int!
  name: String!
  profile_path: String
}

type Comment {
  content: String!
  createdAt: DateTime!
  id: Int!
  review: Review!
  reviewId: Int!
  updatedAt: DateTime!
  writer: User!
  writerId: Int!
}

input CommentCreateInput {
  content: String!
  createdAt: DateTime
  review: ReviewCreateOneWithoutCommentsInput!
  updatedAt: DateTime
  writer: UserCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutReviewInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutreviewInput!]
  create: [CommentCreateWithoutReviewInput!]
}

input CommentCreateManyWithoutWriterInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutwriterInput!]
  create: [CommentCreateWithoutWriterInput!]
}

input CommentCreateOrConnectWithoutreviewInput {
  create: CommentCreateWithoutReviewInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutwriterInput {
  create: CommentCreateWithoutWriterInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutReviewInput {
  content: String!
  createdAt: DateTime
  updatedAt: DateTime
  writer: UserCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutWriterInput {
  content: String!
  createdAt: DateTime
  review: ReviewCreateOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  reviewId: IntFilter
  updatedAt: DateTimeFilter
  writerId: IntFilter
}

input CommentUpdateInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  review: ReviewUpdateOneRequiredWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  writer: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithoutReviewInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutreviewInput!]
  create: [CommentCreateWithoutReviewInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutReviewInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutReviewInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutReviewInput!]
}

input CommentUpdateManyWithoutWriterInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutwriterInput!]
  create: [CommentCreateWithoutWriterInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutWriterInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutWriterInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutWriterInput!]
}

input CommentUpdateManyWithWhereWithoutReviewInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutWriterInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateWithoutReviewInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  writer: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutWriterInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  review: ReviewUpdateOneRequiredWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithWhereUniqueWithoutReviewInput {
  data: CommentUpdateWithoutReviewInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutWriterInput {
  data: CommentUpdateWithoutWriterInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutReviewInput {
  create: CommentCreateWithoutReviewInput!
  update: CommentUpdateWithoutReviewInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutWriterInput {
  create: CommentCreateWithoutWriterInput!
  update: CommentUpdateWithoutWriterInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  review: ReviewWhereInput
  reviewId: IntFilter
  updatedAt: DateTimeFilter
  writer: UserWhereInput
  writerId: IntFilter
}

input CommentWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type DetailFetch implements IFetch {
  backdrop_path: String
  genres: [Genre!]
  id: Int!
  media_type: String
  overview: String!
  poster_path: String
  release_date: String!
  runtime: Int
  tagline: String
  title: String!
  total_pages: Int!
  total_results: Int!
  userReview: Review
  videos: [Video!]
  vote_average: Float!
  vote_count: Int!
}

input EnumAlertTypeFieldUpdateOperationsInput {
  set: AlertType
}

input EnumAlertTypeFilter {
  equals: AlertType
  in: [AlertType!]
  not: NestedEnumAlertTypeFilter
  notIn: [AlertType!]
}

input EnumSocialFieldUpdateOperationsInput {
  set: Social
}

input EnumSocialFilter {
  equals: Social
  in: [Social!]
  not: NestedEnumSocialFilter
  notIn: [Social!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

type Genre {
  id: Int!
  name: String!
}

interface IFetch {
  backdrop_path: String
  genres: [Genre!]
  id: Int!
  media_type: String
  overview: String!
  poster_path: String
  tagline: String
  total_pages: Int!
  total_results: Int!
  vote_average: Float!
  vote_count: Int!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type MovieFetch implements IFetch {
  backdrop_path: String
  genres: [Genre!]
  id: Int!
  media_type: String
  overview: String!
  poster_path: String
  release_date: String!
  runtime: Int
  tagline: String
  title: String!
  total_pages: Int!
  total_results: Int!
  videos: [Video!]
  vote_average: Float!
  vote_count: Int!
}

type Mutation {
  createOneComment(data: CommentCreateInput!): Comment!
  createReview(movieId: String!, movieTitle: String!, rating: Float!): Review!
  deleteManyAlert(where: AlertWhereInput): BatchPayload!
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOneReview(where: ReviewWhereUniqueInput!): Review
  localLogin(login: String!, password: String!): AuthPayload
  localSignUp(login: String!, password: String!): AuthPayload
  logout: Boolean
  signUp(data: UserCreateInput!): User!
  socialAuth(token: String!): AuthPayload!
  toggleLikeReview(reviewId: Int!): Review
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateOneProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateReview(content: String, rating: Float, reviewId: Int!): Review
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumAlertTypeFilter {
  equals: AlertType
  in: [AlertType!]
  not: NestedEnumAlertTypeFilter
  notIn: [AlertType!]
}

input NestedEnumSocialFilter {
  equals: Social
  in: [Social!]
  not: NestedEnumSocialFilter
  notIn: [Social!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Network {
  id: Int!
  logo_path: String
  name: String!
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type PersonFetch {
  id: Int!
  name: String!
  profile_path: String
}

type Profile {
  bio: String
  email: String
  id: Int!
  user: User!
  userId: Int!
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutuserInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutuserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  bio: String
  email: String
}

input ProfileUpdateInput {
  bio: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProfileInput
}

input ProfileUpdateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutuserInput
  create: ProfileCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateWithoutUserInput {
  bio: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
}

input ProfileUpsertWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  update: ProfileUpdateWithoutUserInput!
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  bio: StringNullableFilter
  email: StringNullableFilter
  id: IntFilter
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  user: UserWhereInput
  userId: IntFilter
}

input ProfileWhereUniqueInput {
  email: String
  id: Int
  userId: Int
}

type Query {
  alerts(after: AlertWhereUniqueInput, before: AlertWhereUniqueInput, first: Int, last: Int): [Alert!]!
  casts(id: String!, media_type: String!): [CastFetch!]!
  check: [Alert!]!
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  detail(id: String!, media_type: String!): DetailFetch!
  getUserReview(movieId: String!): Review
  movie(id: String!): MovieFetch!
  movies(page: Int!): [MovieFetch!]!
  multiSearch(page: Int!, searchType: String!, term: String!): [SearchFetch!]!
  profile(where: ProfileWhereUniqueInput!): Profile
  review(where: ReviewWhereUniqueInput!): Review
  reviews(id: String!, size: Int!, skip: Int!): [Review!]!
  show(id: Int!): ShowFetch!
  shows(page: Int!): [ShowFetch!]!
  similarWorks(id: String!, media_type: String!): [SimilarWorksFetch!]!
  trendingMovies(timeWindow: String!): [MovieFetch!]!
  trendingShows(timeWindow: String!): [ShowFetch!]!
  uncheckedAlertsCount: Int!
  user(where: UserWhereUniqueInput!): User
}

type Review {
  content: String!
  createdAt: DateTime!
  id: Int!
  isLike: Boolean!
  likeCount: Int!
  movieId: String!
  movieTitle: String!
  rating: Float!
  updatedAt: DateTime!
  writer: Writer!
  writerId: Int!
}

input ReviewCreateManyWithoutWriterInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutwriterInput!]
  create: [ReviewCreateWithoutWriterInput!]
}

input ReviewCreateOneWithoutCommentsInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutcommentsInput
  create: ReviewCreateWithoutCommentsInput
}

input ReviewCreateOneWithoutLikeUsersInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutlikeUsersInput
  create: ReviewCreateWithoutLikeUsersInput
}

input ReviewCreateOrConnectWithoutcommentsInput {
  create: ReviewCreateWithoutCommentsInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateOrConnectWithoutlikeUsersInput {
  create: ReviewCreateWithoutLikeUsersInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateOrConnectWithoutwriterInput {
  create: ReviewCreateWithoutWriterInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateWithoutCommentsInput {
  content: String!
  createdAt: DateTime
  likeUsers: UserLikeReviewCreateManyWithoutReviewInput
  movieId: String!
  movieTitle: String!
  rating: Float!
  updatedAt: DateTime
  writer: UserCreateOneWithoutReviewsInput!
}

input ReviewCreateWithoutLikeUsersInput {
  comments: CommentCreateManyWithoutReviewInput
  content: String!
  createdAt: DateTime
  movieId: String!
  movieTitle: String!
  rating: Float!
  updatedAt: DateTime
  writer: UserCreateOneWithoutReviewsInput!
}

input ReviewCreateWithoutWriterInput {
  comments: CommentCreateManyWithoutReviewInput
  content: String!
  createdAt: DateTime
  likeUsers: UserLikeReviewCreateManyWithoutReviewInput
  movieId: String!
  movieTitle: String!
  rating: Float!
  updatedAt: DateTime
}

input ReviewListRelationFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  movieId: StringFilter
  movieTitle: StringFilter
  NOT: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  rating: FloatFilter
  updatedAt: DateTimeFilter
  writerId: IntFilter
}

input ReviewUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  movieId: StringFieldUpdateOperationsInput
  movieTitle: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReviewUpdateManyWithoutWriterInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutwriterInput!]
  create: [ReviewCreateWithoutWriterInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutWriterInput!]
  updateMany: [ReviewUpdateManyWithWhereWithoutWriterInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutWriterInput!]
}

input ReviewUpdateManyWithWhereWithoutWriterInput {
  data: ReviewUpdateManyMutationInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateOneRequiredWithoutCommentsInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutcommentsInput
  create: ReviewCreateWithoutCommentsInput
  update: ReviewUpdateWithoutCommentsInput
  upsert: ReviewUpsertWithoutCommentsInput
}

input ReviewUpdateOneRequiredWithoutLikeUsersInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutlikeUsersInput
  create: ReviewCreateWithoutLikeUsersInput
  update: ReviewUpdateWithoutLikeUsersInput
  upsert: ReviewUpsertWithoutLikeUsersInput
}

input ReviewUpdateWithoutCommentsInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  likeUsers: UserLikeReviewUpdateManyWithoutReviewInput
  movieId: StringFieldUpdateOperationsInput
  movieTitle: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  writer: UserUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateWithoutLikeUsersInput {
  comments: CommentUpdateManyWithoutReviewInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  movieId: StringFieldUpdateOperationsInput
  movieTitle: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  writer: UserUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateWithoutWriterInput {
  comments: CommentUpdateManyWithoutReviewInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  likeUsers: UserLikeReviewUpdateManyWithoutReviewInput
  movieId: StringFieldUpdateOperationsInput
  movieTitle: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReviewUpdateWithWhereUniqueWithoutWriterInput {
  data: ReviewUpdateWithoutWriterInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithoutCommentsInput {
  create: ReviewCreateWithoutCommentsInput!
  update: ReviewUpdateWithoutCommentsInput!
}

input ReviewUpsertWithoutLikeUsersInput {
  create: ReviewCreateWithoutLikeUsersInput!
  update: ReviewUpdateWithoutLikeUsersInput!
}

input ReviewUpsertWithWhereUniqueWithoutWriterInput {
  create: ReviewCreateWithoutWriterInput!
  update: ReviewUpdateWithoutWriterInput!
  where: ReviewWhereUniqueInput!
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  comments: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  likeUsers: UserLikeReviewListRelationFilter
  movieId: StringFilter
  movieTitle: StringFilter
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  rating: FloatFilter
  updatedAt: DateTimeFilter
  writer: UserWhereInput
  writerId: IntFilter
}

input ReviewWhereUniqueInput {
  id: Int
}

type SearchFetch {
  first_air_date: String
  id: Int!
  media_type: String
  name: String
  poster_path: String
  profile_path: String
  release_date: String
  title: String
  vote_average: Float
}

type ShowFetch implements IFetch {
  backdrop_path: String
  episode_run_time: [Int!]
  first_air_date: String!
  genres: [Genre!]
  id: Int!
  media_type: String
  name: String!
  networks: [Network!]
  overview: String!
  poster_path: String
  tagline: String
  total_pages: Int!
  total_results: Int!
  videos: [Video!]
  vote_average: Float!
  vote_count: Int!
}

type SimilarWorksFetch {
  id: Int!
  poster_path: String
  title: String!
  vote_average: Float!
}

enum Social {
  GOOGLE
  LOCAL
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  newAlert: Alert!
  newReview: Review!
}

type User {
  alerts(after: AlertWhereUniqueInput, before: AlertWhereUniqueInput, first: Int, last: Int): [Alert!]!
  avatar: String
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  id: Int!
  likeReviews(after: UserLikeReviewWhereUniqueInput, before: UserLikeReviewWhereUniqueInput, first: Int, last: Int): [UserLikeReview!]!
  login: String!
  name: String!
  profile: Profile
  reviews(after: ReviewWhereUniqueInput, before: ReviewWhereUniqueInput, first: Int, last: Int): [Review!]!
  social: Social!
}

input UserCreateInput {
  alerts: AlertCreateManyWithoutUserInput
  avatar: String
  comments: CommentCreateManyWithoutWriterInput
  likeReviews: UserLikeReviewCreateManyWithoutUserInput
  login: String!
  name: String!
  password: String
  profile: ProfileCreateOneWithoutUserInput
  reviews: ReviewCreateManyWithoutWriterInput
  social: Social!
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutcommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateOneWithoutLikeReviewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutlikeReviewsInput
  create: UserCreateWithoutLikeReviewsInput
}

input UserCreateOneWithoutReviewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutreviewsInput
  create: UserCreateWithoutReviewsInput
}

input UserCreateOrConnectWithoutcommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutlikeReviewsInput {
  create: UserCreateWithoutLikeReviewsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutprofileInput {
  create: UserCreateWithoutProfileInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutreviewsInput {
  create: UserCreateWithoutReviewsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCommentsInput {
  alerts: AlertCreateManyWithoutUserInput
  avatar: String
  likeReviews: UserLikeReviewCreateManyWithoutUserInput
  login: String!
  name: String!
  password: String
  profile: ProfileCreateOneWithoutUserInput
  reviews: ReviewCreateManyWithoutWriterInput
  social: Social!
}

input UserCreateWithoutLikeReviewsInput {
  alerts: AlertCreateManyWithoutUserInput
  avatar: String
  comments: CommentCreateManyWithoutWriterInput
  login: String!
  name: String!
  password: String
  profile: ProfileCreateOneWithoutUserInput
  reviews: ReviewCreateManyWithoutWriterInput
  social: Social!
}

input UserCreateWithoutProfileInput {
  alerts: AlertCreateManyWithoutUserInput
  avatar: String
  comments: CommentCreateManyWithoutWriterInput
  likeReviews: UserLikeReviewCreateManyWithoutUserInput
  login: String!
  name: String!
  password: String
  reviews: ReviewCreateManyWithoutWriterInput
  social: Social!
}

input UserCreateWithoutReviewsInput {
  alerts: AlertCreateManyWithoutUserInput
  avatar: String
  comments: CommentCreateManyWithoutWriterInput
  likeReviews: UserLikeReviewCreateManyWithoutUserInput
  login: String!
  name: String!
  password: String
  profile: ProfileCreateOneWithoutUserInput
  social: Social!
}

input UserIdReviewIdCompoundUniqueInput {
  reviewId: Int!
  userId: Int!
}

type UserLikeReview {
  review: Review!
  reviewId: Int!
  user: User!
  userId: Int!
}

input UserLikeReviewCreateManyWithoutReviewInput {
  connect: [UserLikeReviewWhereUniqueInput!]
  connectOrCreate: [UserLikeReviewCreateOrConnectWithoutreviewInput!]
  create: [UserLikeReviewCreateWithoutReviewInput!]
}

input UserLikeReviewCreateManyWithoutUserInput {
  connect: [UserLikeReviewWhereUniqueInput!]
  connectOrCreate: [UserLikeReviewCreateOrConnectWithoutuserInput!]
  create: [UserLikeReviewCreateWithoutUserInput!]
}

input UserLikeReviewCreateOrConnectWithoutreviewInput {
  create: UserLikeReviewCreateWithoutReviewInput!
  where: UserLikeReviewWhereUniqueInput!
}

input UserLikeReviewCreateOrConnectWithoutuserInput {
  create: UserLikeReviewCreateWithoutUserInput!
  where: UserLikeReviewWhereUniqueInput!
}

input UserLikeReviewCreateWithoutReviewInput {
  user: UserCreateOneWithoutLikeReviewsInput!
}

input UserLikeReviewCreateWithoutUserInput {
  review: ReviewCreateOneWithoutLikeUsersInput!
}

input UserLikeReviewListRelationFilter {
  every: UserLikeReviewWhereInput
  none: UserLikeReviewWhereInput
  some: UserLikeReviewWhereInput
}

input UserLikeReviewScalarWhereInput {
  AND: [UserLikeReviewScalarWhereInput!]
  NOT: [UserLikeReviewScalarWhereInput!]
  OR: [UserLikeReviewScalarWhereInput!]
  reviewId: IntFilter
  userId: IntFilter
}

input UserLikeReviewUpdateManyMutationInput {
  DUMMY_INPUT_FIELD_WORKAROUND: String
}

input UserLikeReviewUpdateManyWithoutReviewInput {
  connect: [UserLikeReviewWhereUniqueInput!]
  connectOrCreate: [UserLikeReviewCreateOrConnectWithoutreviewInput!]
  create: [UserLikeReviewCreateWithoutReviewInput!]
  delete: [UserLikeReviewWhereUniqueInput!]
  deleteMany: [UserLikeReviewScalarWhereInput!]
  disconnect: [UserLikeReviewWhereUniqueInput!]
  set: [UserLikeReviewWhereUniqueInput!]
  update: [UserLikeReviewUpdateWithWhereUniqueWithoutReviewInput!]
  updateMany: [UserLikeReviewUpdateManyWithWhereWithoutReviewInput!]
  upsert: [UserLikeReviewUpsertWithWhereUniqueWithoutReviewInput!]
}

input UserLikeReviewUpdateManyWithoutUserInput {
  connect: [UserLikeReviewWhereUniqueInput!]
  connectOrCreate: [UserLikeReviewCreateOrConnectWithoutuserInput!]
  create: [UserLikeReviewCreateWithoutUserInput!]
  delete: [UserLikeReviewWhereUniqueInput!]
  deleteMany: [UserLikeReviewScalarWhereInput!]
  disconnect: [UserLikeReviewWhereUniqueInput!]
  set: [UserLikeReviewWhereUniqueInput!]
  update: [UserLikeReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserLikeReviewUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserLikeReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input UserLikeReviewUpdateManyWithWhereWithoutReviewInput {
  data: UserLikeReviewUpdateManyMutationInput!
  where: UserLikeReviewScalarWhereInput!
}

input UserLikeReviewUpdateManyWithWhereWithoutUserInput {
  data: UserLikeReviewUpdateManyMutationInput!
  where: UserLikeReviewScalarWhereInput!
}

input UserLikeReviewUpdateWithoutReviewInput {
  user: UserUpdateOneRequiredWithoutLikeReviewsInput
}

input UserLikeReviewUpdateWithoutUserInput {
  review: ReviewUpdateOneRequiredWithoutLikeUsersInput
}

input UserLikeReviewUpdateWithWhereUniqueWithoutReviewInput {
  data: UserLikeReviewUpdateWithoutReviewInput!
  where: UserLikeReviewWhereUniqueInput!
}

input UserLikeReviewUpdateWithWhereUniqueWithoutUserInput {
  data: UserLikeReviewUpdateWithoutUserInput!
  where: UserLikeReviewWhereUniqueInput!
}

input UserLikeReviewUpsertWithWhereUniqueWithoutReviewInput {
  create: UserLikeReviewCreateWithoutReviewInput!
  update: UserLikeReviewUpdateWithoutReviewInput!
  where: UserLikeReviewWhereUniqueInput!
}

input UserLikeReviewUpsertWithWhereUniqueWithoutUserInput {
  create: UserLikeReviewCreateWithoutUserInput!
  update: UserLikeReviewUpdateWithoutUserInput!
  where: UserLikeReviewWhereUniqueInput!
}

input UserLikeReviewWhereInput {
  AND: [UserLikeReviewWhereInput!]
  NOT: [UserLikeReviewWhereInput!]
  OR: [UserLikeReviewWhereInput!]
  review: ReviewWhereInput
  reviewId: IntFilter
  user: UserWhereInput
  userId: IntFilter
}

input UserLikeReviewWhereUniqueInput {
  userId_reviewId: UserIdReviewIdCompoundUniqueInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutcommentsInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutLikeReviewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutlikeReviewsInput
  create: UserCreateWithoutLikeReviewsInput
  update: UserUpdateWithoutLikeReviewsInput
  upsert: UserUpsertWithoutLikeReviewsInput
}

input UserUpdateOneRequiredWithoutProfileInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutprofileInput
  create: UserCreateWithoutProfileInput
  update: UserUpdateWithoutProfileInput
  upsert: UserUpsertWithoutProfileInput
}

input UserUpdateOneRequiredWithoutReviewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutreviewsInput
  create: UserCreateWithoutReviewsInput
  update: UserUpdateWithoutReviewsInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateWithoutCommentsInput {
  alerts: AlertUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  likeReviews: UserLikeReviewUpdateManyWithoutUserInput
  login: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
  reviews: ReviewUpdateManyWithoutWriterInput
  social: EnumSocialFieldUpdateOperationsInput
}

input UserUpdateWithoutLikeReviewsInput {
  alerts: AlertUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutWriterInput
  login: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
  reviews: ReviewUpdateManyWithoutWriterInput
  social: EnumSocialFieldUpdateOperationsInput
}

input UserUpdateWithoutProfileInput {
  alerts: AlertUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutWriterInput
  likeReviews: UserLikeReviewUpdateManyWithoutUserInput
  login: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  reviews: ReviewUpdateManyWithoutWriterInput
  social: EnumSocialFieldUpdateOperationsInput
}

input UserUpdateWithoutReviewsInput {
  alerts: AlertUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutWriterInput
  likeReviews: UserLikeReviewUpdateManyWithoutUserInput
  login: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
  social: EnumSocialFieldUpdateOperationsInput
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
}

input UserUpsertWithoutLikeReviewsInput {
  create: UserCreateWithoutLikeReviewsInput!
  update: UserUpdateWithoutLikeReviewsInput!
}

input UserUpsertWithoutProfileInput {
  create: UserCreateWithoutProfileInput!
  update: UserUpdateWithoutProfileInput!
}

input UserUpsertWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  update: UserUpdateWithoutReviewsInput!
}

input UserWhereInput {
  alerts: AlertListRelationFilter
  AND: [UserWhereInput!]
  avatar: StringNullableFilter
  comments: CommentListRelationFilter
  id: IntFilter
  likeReviews: UserLikeReviewListRelationFilter
  login: StringFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringNullableFilter
  profile: ProfileWhereInput
  reviews: ReviewListRelationFilter
  social: EnumSocialFilter
}

input UserWhereUniqueInput {
  id: Int
  login: String
}

type Video {
  id: String!
  key: String!
  name: String!
}

type Writer {
  avatar: String
  name: String!
}
