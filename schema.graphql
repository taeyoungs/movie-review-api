### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Alert {
  check: Boolean!
  comment: Comment
  commentId: Int
  createdAt: DateTime!
  id: Int!
  message: String!
  type: AlertType!
  user: User!
  userId: Int!
}

input AlertCreateManyWithoutCommentInput {
  connect: [AlertWhereUniqueInput!]
  connectOrCreate: [AlertCreateOrConnectWithoutcommentInput!]
  create: [AlertCreateWithoutCommentInput!]
}

input AlertCreateManyWithoutUserInput {
  connect: [AlertWhereUniqueInput!]
  connectOrCreate: [AlertCreateOrConnectWithoutuserInput!]
  create: [AlertCreateWithoutUserInput!]
}

input AlertCreateOrConnectWithoutcommentInput {
  create: AlertCreateWithoutCommentInput!
  where: AlertWhereUniqueInput!
}

input AlertCreateOrConnectWithoutuserInput {
  create: AlertCreateWithoutUserInput!
  where: AlertWhereUniqueInput!
}

input AlertCreateWithoutCommentInput {
  check: Boolean
  createdAt: DateTime
  id: Int!
  message: String!
  type: AlertType!
  user: UserCreateOneWithoutAlertsInput!
}

input AlertCreateWithoutUserInput {
  check: Boolean
  comment: CommentCreateOneWithoutAlertsInput
  createdAt: DateTime
  id: Int!
  message: String!
  type: AlertType!
}

input AlertScalarWhereInput {
  AND: [AlertScalarWhereInput!]
  check: BoolFilter
  commentId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  message: StringFilter
  NOT: [AlertScalarWhereInput!]
  OR: [AlertScalarWhereInput!]
  type: EnumAlertTypeFilter
  userId: IntFilter
}

enum AlertType {
  COMMENT
  LIKE
}

input AlertUpdateManyMutationInput {
  check: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  type: EnumAlertTypeFieldUpdateOperationsInput
}

input AlertUpdateManyWithoutCommentInput {
  connect: [AlertWhereUniqueInput!]
  connectOrCreate: [AlertCreateOrConnectWithoutcommentInput!]
  create: [AlertCreateWithoutCommentInput!]
  delete: [AlertWhereUniqueInput!]
  deleteMany: [AlertScalarWhereInput!]
  disconnect: [AlertWhereUniqueInput!]
  set: [AlertWhereUniqueInput!]
  update: [AlertUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [AlertUpdateManyWithWhereWithoutCommentInput!]
  upsert: [AlertUpsertWithWhereUniqueWithoutCommentInput!]
}

input AlertUpdateManyWithoutUserInput {
  connect: [AlertWhereUniqueInput!]
  connectOrCreate: [AlertCreateOrConnectWithoutuserInput!]
  create: [AlertCreateWithoutUserInput!]
  delete: [AlertWhereUniqueInput!]
  deleteMany: [AlertScalarWhereInput!]
  disconnect: [AlertWhereUniqueInput!]
  set: [AlertWhereUniqueInput!]
  update: [AlertUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AlertUpdateManyWithWhereWithoutUserInput!]
  upsert: [AlertUpsertWithWhereUniqueWithoutUserInput!]
}

input AlertUpdateManyWithWhereWithoutCommentInput {
  data: AlertUpdateManyMutationInput!
  where: AlertScalarWhereInput!
}

input AlertUpdateManyWithWhereWithoutUserInput {
  data: AlertUpdateManyMutationInput!
  where: AlertScalarWhereInput!
}

input AlertUpdateWithoutCommentInput {
  check: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  type: EnumAlertTypeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAlertsInput
}

input AlertUpdateWithoutUserInput {
  check: BoolFieldUpdateOperationsInput
  comment: CommentUpdateOneWithoutAlertsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  message: StringFieldUpdateOperationsInput
  type: EnumAlertTypeFieldUpdateOperationsInput
}

input AlertUpdateWithWhereUniqueWithoutCommentInput {
  data: AlertUpdateWithoutCommentInput!
  where: AlertWhereUniqueInput!
}

input AlertUpdateWithWhereUniqueWithoutUserInput {
  data: AlertUpdateWithoutUserInput!
  where: AlertWhereUniqueInput!
}

input AlertUpsertWithWhereUniqueWithoutCommentInput {
  create: AlertCreateWithoutCommentInput!
  update: AlertUpdateWithoutCommentInput!
  where: AlertWhereUniqueInput!
}

input AlertUpsertWithWhereUniqueWithoutUserInput {
  create: AlertCreateWithoutUserInput!
  update: AlertUpdateWithoutUserInput!
  where: AlertWhereUniqueInput!
}

input AlertWhereUniqueInput {
  id: Int
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Comment {
  alerts: [Alert!]!
  content: String!
  createdAt: DateTime!
  id: Int!
  review: Review!
  reviewId: Int!
  taggedUser: [User!]!
  updatedAt: DateTime!
  writer: User!
  writerId: Int!
}

input CommentCreateInput {
  alerts: AlertCreateManyWithoutCommentInput
  content: String!
  createdAt: DateTime
  id: Int!
  review: ReviewCreateOneWithoutCommentsInput!
  taggedUser: UserCreateManyWithoutTaggedCommentInput
  updatedAt: DateTime
  writer: UserCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutReviewInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutreviewInput!]
  create: [CommentCreateWithoutReviewInput!]
}

input CommentCreateManyWithoutTaggedUserInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithouttaggedUserInput!]
  create: [CommentCreateWithoutTaggedUserInput!]
}

input CommentCreateManyWithoutWriterInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutwriterInput!]
  create: [CommentCreateWithoutWriterInput!]
}

input CommentCreateOneWithoutAlertsInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutalertsInput
  create: CommentCreateWithoutAlertsInput
}

input CommentCreateOrConnectWithoutalertsInput {
  create: CommentCreateWithoutAlertsInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutreviewInput {
  create: CommentCreateWithoutReviewInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithouttaggedUserInput {
  create: CommentCreateWithoutTaggedUserInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutwriterInput {
  create: CommentCreateWithoutWriterInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutAlertsInput {
  content: String!
  createdAt: DateTime
  id: Int!
  review: ReviewCreateOneWithoutCommentsInput!
  taggedUser: UserCreateManyWithoutTaggedCommentInput
  updatedAt: DateTime
  writer: UserCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutReviewInput {
  alerts: AlertCreateManyWithoutCommentInput
  content: String!
  createdAt: DateTime
  id: Int!
  taggedUser: UserCreateManyWithoutTaggedCommentInput
  updatedAt: DateTime
  writer: UserCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutTaggedUserInput {
  alerts: AlertCreateManyWithoutCommentInput
  content: String!
  createdAt: DateTime
  id: Int!
  review: ReviewCreateOneWithoutCommentsInput!
  updatedAt: DateTime
  writer: UserCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutWriterInput {
  alerts: AlertCreateManyWithoutCommentInput
  content: String!
  createdAt: DateTime
  id: Int!
  review: ReviewCreateOneWithoutCommentsInput!
  taggedUser: UserCreateManyWithoutTaggedCommentInput
  updatedAt: DateTime
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  reviewId: IntFilter
  updatedAt: DateTimeFilter
  writerId: IntFilter
}

input CommentUpdateInput {
  alerts: AlertUpdateManyWithoutCommentInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  review: ReviewUpdateOneRequiredWithoutCommentsInput
  taggedUser: UserUpdateManyWithoutTaggedCommentInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  writer: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithoutReviewInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutreviewInput!]
  create: [CommentCreateWithoutReviewInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutReviewInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutReviewInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutReviewInput!]
}

input CommentUpdateManyWithoutTaggedUserInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithouttaggedUserInput!]
  create: [CommentCreateWithoutTaggedUserInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutTaggedUserInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutTaggedUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutTaggedUserInput!]
}

input CommentUpdateManyWithoutWriterInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutwriterInput!]
  create: [CommentCreateWithoutWriterInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutWriterInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutWriterInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutWriterInput!]
}

input CommentUpdateManyWithWhereWithoutReviewInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutTaggedUserInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutWriterInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateOneWithoutAlertsInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutalertsInput
  create: CommentCreateWithoutAlertsInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutAlertsInput
  upsert: CommentUpsertWithoutAlertsInput
}

input CommentUpdateWithoutAlertsInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  review: ReviewUpdateOneRequiredWithoutCommentsInput
  taggedUser: UserUpdateManyWithoutTaggedCommentInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  writer: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutReviewInput {
  alerts: AlertUpdateManyWithoutCommentInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  taggedUser: UserUpdateManyWithoutTaggedCommentInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  writer: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutTaggedUserInput {
  alerts: AlertUpdateManyWithoutCommentInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  review: ReviewUpdateOneRequiredWithoutCommentsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  writer: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutWriterInput {
  alerts: AlertUpdateManyWithoutCommentInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  review: ReviewUpdateOneRequiredWithoutCommentsInput
  taggedUser: UserUpdateManyWithoutTaggedCommentInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithWhereUniqueWithoutReviewInput {
  data: CommentUpdateWithoutReviewInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutTaggedUserInput {
  data: CommentUpdateWithoutTaggedUserInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutWriterInput {
  data: CommentUpdateWithoutWriterInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithoutAlertsInput {
  create: CommentCreateWithoutAlertsInput!
  update: CommentUpdateWithoutAlertsInput!
}

input CommentUpsertWithWhereUniqueWithoutReviewInput {
  create: CommentCreateWithoutReviewInput!
  update: CommentUpdateWithoutReviewInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutTaggedUserInput {
  create: CommentCreateWithoutTaggedUserInput!
  update: CommentUpdateWithoutTaggedUserInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutWriterInput {
  create: CommentCreateWithoutWriterInput!
  update: CommentUpdateWithoutWriterInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumAlertTypeFieldUpdateOperationsInput {
  set: AlertType
}

input EnumAlertTypeFilter {
  equals: AlertType
  in: [AlertType!]
  not: NestedEnumAlertTypeFilter
  notIn: [AlertType!]
}

input EnumSocialFieldUpdateOperationsInput {
  set: Social
}

input EnumSocialFilter {
  equals: Social
  in: [Social!]
  not: NestedEnumSocialFilter
  notIn: [Social!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

type Genre {
  id: Int!
  name: String!
}

interface IFetch {
  backdrop_path: String
  genres: [Genre!]
  id: Int!
  overview: String!
  poster_path: String
  total_pages: Int!
  total_results: Int!
  vote_average: Float!
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type MovieFetch implements IFetch {
  backdrop_path: String
  genres: [Genre!]
  id: Int!
  overview: String!
  poster_path: String
  release_date: String!
  title: String!
  total_pages: Int!
  total_results: Int!
  videos: [Video!]
  vote_average: Float!
}

type Mutation {
  createOneComment(data: CommentCreateInput!): Comment!
  createOneReview(data: ReviewCreateInput!): Review!
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOneReview(where: ReviewWhereUniqueInput!): Review
  signUp(data: UserCreateInput!): User!
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateOneProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateOneReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumAlertTypeFilter {
  equals: AlertType
  in: [AlertType!]
  not: NestedEnumAlertTypeFilter
  notIn: [AlertType!]
}

input NestedEnumSocialFilter {
  equals: Social
  in: [Social!]
  not: NestedEnumSocialFilter
  notIn: [Social!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Network {
  id: Int!
  logo_path: String
  name: String!
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Profile {
  bio: String
  email: String
  id: Int!
  user: User!
  userId: Int!
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutuserInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutuserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  bio: String
  email: String
}

input ProfileUpdateInput {
  bio: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProfileInput
}

input ProfileUpdateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutuserInput
  create: ProfileCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateWithoutUserInput {
  bio: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
}

input ProfileUpsertWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  update: ProfileUpdateWithoutUserInput!
}

input ProfileWhereUniqueInput {
  email: String
  id: Int
  userId: Int
}

type Query {
  alert(where: AlertWhereUniqueInput!): Alert
  alerts(after: AlertWhereUniqueInput, before: AlertWhereUniqueInput, first: Int, last: Int): [Alert!]!
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  movie(id: Int!): MovieFetch!
  movies(page: Int!): [MovieFetch!]!
  profile(where: ProfileWhereUniqueInput!): Profile
  review(where: ReviewWhereUniqueInput!): Review
  reviews(after: ReviewWhereUniqueInput, before: ReviewWhereUniqueInput, first: Int, last: Int): [Review!]!
  searchMovie(page: Int!, term: String!): [MovieFetch!]!
  searchShow(page: Int!, term: String!): [ShowFetch!]!
  show(id: Int!): ShowFetch!
  shows(page: Int!): [ShowFetch!]!
  user(where: UserWhereUniqueInput!): User
}

type Review {
  content: String!
  createdAt: DateTime!
  id: Int!
  likedUser(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  movieTitle: String!
  posterPath: String!
  rating: Float!
  title: String!
  updatedAt: DateTime!
  writer: User!
  writerId: Int!
}

input ReviewCreateInput {
  comments: CommentCreateManyWithoutReviewInput
  content: String!
  createdAt: DateTime
  likedUser: UserCreateManyWithoutLikedReviewInput
  movieTitle: String!
  posterPath: String!
  rating: Float!
  title: String!
  updatedAt: DateTime
  writer: UserCreateOneWithoutReviewsInput!
}

input ReviewCreateManyWithoutLikedUserInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutlikedUserInput!]
  create: [ReviewCreateWithoutLikedUserInput!]
}

input ReviewCreateManyWithoutWriterInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutwriterInput!]
  create: [ReviewCreateWithoutWriterInput!]
}

input ReviewCreateOneWithoutCommentsInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutcommentsInput
  create: ReviewCreateWithoutCommentsInput
}

input ReviewCreateOrConnectWithoutcommentsInput {
  create: ReviewCreateWithoutCommentsInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateOrConnectWithoutlikedUserInput {
  create: ReviewCreateWithoutLikedUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateOrConnectWithoutwriterInput {
  create: ReviewCreateWithoutWriterInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateWithoutCommentsInput {
  content: String!
  createdAt: DateTime
  likedUser: UserCreateManyWithoutLikedReviewInput
  movieTitle: String!
  posterPath: String!
  rating: Float!
  title: String!
  updatedAt: DateTime
  writer: UserCreateOneWithoutReviewsInput!
}

input ReviewCreateWithoutLikedUserInput {
  comments: CommentCreateManyWithoutReviewInput
  content: String!
  createdAt: DateTime
  movieTitle: String!
  posterPath: String!
  rating: Float!
  title: String!
  updatedAt: DateTime
  writer: UserCreateOneWithoutReviewsInput!
}

input ReviewCreateWithoutWriterInput {
  comments: CommentCreateManyWithoutReviewInput
  content: String!
  createdAt: DateTime
  likedUser: UserCreateManyWithoutLikedReviewInput
  movieTitle: String!
  posterPath: String!
  rating: Float!
  title: String!
  updatedAt: DateTime
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  movieTitle: StringFilter
  NOT: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  posterPath: StringFilter
  rating: FloatFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  writerId: IntFilter
}

input ReviewUpdateInput {
  comments: CommentUpdateManyWithoutReviewInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  likedUser: UserUpdateManyWithoutLikedReviewInput
  movieTitle: StringFieldUpdateOperationsInput
  posterPath: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  writer: UserUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  movieTitle: StringFieldUpdateOperationsInput
  posterPath: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReviewUpdateManyWithoutLikedUserInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutlikedUserInput!]
  create: [ReviewCreateWithoutLikedUserInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutLikedUserInput!]
  updateMany: [ReviewUpdateManyWithWhereWithoutLikedUserInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutLikedUserInput!]
}

input ReviewUpdateManyWithoutWriterInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutwriterInput!]
  create: [ReviewCreateWithoutWriterInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutWriterInput!]
  updateMany: [ReviewUpdateManyWithWhereWithoutWriterInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutWriterInput!]
}

input ReviewUpdateManyWithWhereWithoutLikedUserInput {
  data: ReviewUpdateManyMutationInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateManyWithWhereWithoutWriterInput {
  data: ReviewUpdateManyMutationInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateOneRequiredWithoutCommentsInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutcommentsInput
  create: ReviewCreateWithoutCommentsInput
  update: ReviewUpdateWithoutCommentsInput
  upsert: ReviewUpsertWithoutCommentsInput
}

input ReviewUpdateWithoutCommentsInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  likedUser: UserUpdateManyWithoutLikedReviewInput
  movieTitle: StringFieldUpdateOperationsInput
  posterPath: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  writer: UserUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateWithoutLikedUserInput {
  comments: CommentUpdateManyWithoutReviewInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  movieTitle: StringFieldUpdateOperationsInput
  posterPath: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  writer: UserUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateWithoutWriterInput {
  comments: CommentUpdateManyWithoutReviewInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  likedUser: UserUpdateManyWithoutLikedReviewInput
  movieTitle: StringFieldUpdateOperationsInput
  posterPath: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReviewUpdateWithWhereUniqueWithoutLikedUserInput {
  data: ReviewUpdateWithoutLikedUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutWriterInput {
  data: ReviewUpdateWithoutWriterInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithoutCommentsInput {
  create: ReviewCreateWithoutCommentsInput!
  update: ReviewUpdateWithoutCommentsInput!
}

input ReviewUpsertWithWhereUniqueWithoutLikedUserInput {
  create: ReviewCreateWithoutLikedUserInput!
  update: ReviewUpdateWithoutLikedUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutWriterInput {
  create: ReviewCreateWithoutWriterInput!
  update: ReviewUpdateWithoutWriterInput!
  where: ReviewWhereUniqueInput!
}

input ReviewWhereUniqueInput {
  id: Int
}

type ShowFetch implements IFetch {
  backdrop_path: String
  first_air_date: String!
  genres: [Genre!]
  id: Int!
  name: String!
  networks: [Network!]
  overview: String!
  poster_path: String
  total_pages: Int!
  total_results: Int!
  videos: [Video!]
  vote_average: Float!
}

enum Social {
  GITHUB
  GOOGLE
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  alerts(after: AlertWhereUniqueInput, before: AlertWhereUniqueInput, first: Int, last: Int): [Alert!]!
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  id: Int!
  likedReview(after: ReviewWhereUniqueInput, before: ReviewWhereUniqueInput, first: Int, last: Int): [Review!]!
  login: String!
  name: String!
  profile: Profile
  reviews(after: ReviewWhereUniqueInput, before: ReviewWhereUniqueInput, first: Int, last: Int): [Review!]!
  social: Social!
  taggedComment(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  token: String!
}

input UserCreateInput {
  alerts: AlertCreateManyWithoutUserInput
  avatar: String
  comments: CommentCreateManyWithoutWriterInput
  likedReview: ReviewCreateManyWithoutLikedUserInput
  login: String!
  name: String!
  profile: ProfileCreateOneWithoutUserInput
  reviews: ReviewCreateManyWithoutWriterInput
  social: Social!
  taggedComment: CommentCreateManyWithoutTaggedUserInput
  token: String!
}

input UserCreateManyWithoutLikedReviewInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutlikedReviewInput!]
  create: [UserCreateWithoutLikedReviewInput!]
}

input UserCreateManyWithoutTaggedCommentInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithouttaggedCommentInput!]
  create: [UserCreateWithoutTaggedCommentInput!]
}

input UserCreateOneWithoutAlertsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutalertsInput
  create: UserCreateWithoutAlertsInput
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutcommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateOneWithoutReviewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutreviewsInput
  create: UserCreateWithoutReviewsInput
}

input UserCreateOrConnectWithoutalertsInput {
  create: UserCreateWithoutAlertsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutcommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutlikedReviewInput {
  create: UserCreateWithoutLikedReviewInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutprofileInput {
  create: UserCreateWithoutProfileInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutreviewsInput {
  create: UserCreateWithoutReviewsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithouttaggedCommentInput {
  create: UserCreateWithoutTaggedCommentInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAlertsInput {
  avatar: String
  comments: CommentCreateManyWithoutWriterInput
  likedReview: ReviewCreateManyWithoutLikedUserInput
  login: String!
  name: String!
  profile: ProfileCreateOneWithoutUserInput
  reviews: ReviewCreateManyWithoutWriterInput
  social: Social!
  taggedComment: CommentCreateManyWithoutTaggedUserInput
  token: String!
}

input UserCreateWithoutCommentsInput {
  alerts: AlertCreateManyWithoutUserInput
  avatar: String
  likedReview: ReviewCreateManyWithoutLikedUserInput
  login: String!
  name: String!
  profile: ProfileCreateOneWithoutUserInput
  reviews: ReviewCreateManyWithoutWriterInput
  social: Social!
  taggedComment: CommentCreateManyWithoutTaggedUserInput
  token: String!
}

input UserCreateWithoutLikedReviewInput {
  alerts: AlertCreateManyWithoutUserInput
  avatar: String
  comments: CommentCreateManyWithoutWriterInput
  login: String!
  name: String!
  profile: ProfileCreateOneWithoutUserInput
  reviews: ReviewCreateManyWithoutWriterInput
  social: Social!
  taggedComment: CommentCreateManyWithoutTaggedUserInput
  token: String!
}

input UserCreateWithoutProfileInput {
  alerts: AlertCreateManyWithoutUserInput
  avatar: String
  comments: CommentCreateManyWithoutWriterInput
  likedReview: ReviewCreateManyWithoutLikedUserInput
  login: String!
  name: String!
  reviews: ReviewCreateManyWithoutWriterInput
  social: Social!
  taggedComment: CommentCreateManyWithoutTaggedUserInput
  token: String!
}

input UserCreateWithoutReviewsInput {
  alerts: AlertCreateManyWithoutUserInput
  avatar: String
  comments: CommentCreateManyWithoutWriterInput
  likedReview: ReviewCreateManyWithoutLikedUserInput
  login: String!
  name: String!
  profile: ProfileCreateOneWithoutUserInput
  social: Social!
  taggedComment: CommentCreateManyWithoutTaggedUserInput
  token: String!
}

input UserCreateWithoutTaggedCommentInput {
  alerts: AlertCreateManyWithoutUserInput
  avatar: String
  comments: CommentCreateManyWithoutWriterInput
  likedReview: ReviewCreateManyWithoutLikedUserInput
  login: String!
  name: String!
  profile: ProfileCreateOneWithoutUserInput
  reviews: ReviewCreateManyWithoutWriterInput
  social: Social!
  token: String!
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  avatar: StringNullableFilter
  id: IntFilter
  login: StringFilter
  name: StringFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  social: EnumSocialFilter
  token: StringFilter
}

input UserUpdateManyMutationInput {
  avatar: NullableStringFieldUpdateOperationsInput
  login: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  social: EnumSocialFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input UserUpdateManyWithoutLikedReviewInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutlikedReviewInput!]
  create: [UserCreateWithoutLikedReviewInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutLikedReviewInput!]
  updateMany: [UserUpdateManyWithWhereWithoutLikedReviewInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutLikedReviewInput!]
}

input UserUpdateManyWithoutTaggedCommentInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithouttaggedCommentInput!]
  create: [UserCreateWithoutTaggedCommentInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTaggedCommentInput!]
  updateMany: [UserUpdateManyWithWhereWithoutTaggedCommentInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTaggedCommentInput!]
}

input UserUpdateManyWithWhereWithoutLikedReviewInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithWhereWithoutTaggedCommentInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutAlertsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutalertsInput
  create: UserCreateWithoutAlertsInput
  update: UserUpdateWithoutAlertsInput
  upsert: UserUpsertWithoutAlertsInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutcommentsInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutProfileInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutprofileInput
  create: UserCreateWithoutProfileInput
  update: UserUpdateWithoutProfileInput
  upsert: UserUpsertWithoutProfileInput
}

input UserUpdateOneRequiredWithoutReviewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutreviewsInput
  create: UserCreateWithoutReviewsInput
  update: UserUpdateWithoutReviewsInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateWithoutAlertsInput {
  avatar: NullableStringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutWriterInput
  likedReview: ReviewUpdateManyWithoutLikedUserInput
  login: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
  reviews: ReviewUpdateManyWithoutWriterInput
  social: EnumSocialFieldUpdateOperationsInput
  taggedComment: CommentUpdateManyWithoutTaggedUserInput
  token: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentsInput {
  alerts: AlertUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  likedReview: ReviewUpdateManyWithoutLikedUserInput
  login: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
  reviews: ReviewUpdateManyWithoutWriterInput
  social: EnumSocialFieldUpdateOperationsInput
  taggedComment: CommentUpdateManyWithoutTaggedUserInput
  token: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutLikedReviewInput {
  alerts: AlertUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutWriterInput
  login: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
  reviews: ReviewUpdateManyWithoutWriterInput
  social: EnumSocialFieldUpdateOperationsInput
  taggedComment: CommentUpdateManyWithoutTaggedUserInput
  token: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutProfileInput {
  alerts: AlertUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutWriterInput
  likedReview: ReviewUpdateManyWithoutLikedUserInput
  login: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  reviews: ReviewUpdateManyWithoutWriterInput
  social: EnumSocialFieldUpdateOperationsInput
  taggedComment: CommentUpdateManyWithoutTaggedUserInput
  token: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutReviewsInput {
  alerts: AlertUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutWriterInput
  likedReview: ReviewUpdateManyWithoutLikedUserInput
  login: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
  social: EnumSocialFieldUpdateOperationsInput
  taggedComment: CommentUpdateManyWithoutTaggedUserInput
  token: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutTaggedCommentInput {
  alerts: AlertUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutWriterInput
  likedReview: ReviewUpdateManyWithoutLikedUserInput
  login: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserInput
  reviews: ReviewUpdateManyWithoutWriterInput
  social: EnumSocialFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input UserUpdateWithWhereUniqueWithoutLikedReviewInput {
  data: UserUpdateWithoutLikedReviewInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutTaggedCommentInput {
  data: UserUpdateWithoutTaggedCommentInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutAlertsInput {
  create: UserCreateWithoutAlertsInput!
  update: UserUpdateWithoutAlertsInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
}

input UserUpsertWithoutProfileInput {
  create: UserCreateWithoutProfileInput!
  update: UserUpdateWithoutProfileInput!
}

input UserUpsertWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  update: UserUpdateWithoutReviewsInput!
}

input UserUpsertWithWhereUniqueWithoutLikedReviewInput {
  create: UserCreateWithoutLikedReviewInput!
  update: UserUpdateWithoutLikedReviewInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutTaggedCommentInput {
  create: UserCreateWithoutTaggedCommentInput!
  update: UserUpdateWithoutTaggedCommentInput!
  where: UserWhereUniqueInput!
}

input UserWhereUniqueInput {
  id: Int
}

type Video {
  id: String!
  key: String!
  name: String!
}
