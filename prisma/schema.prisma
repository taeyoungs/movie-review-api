generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                 @id @default(autoincrement())
  name          String
  avatar        String?
  social        Social
  token         String
  login         String              @unique
  profile       Profile?
  reviews       Review[]
  comments      Comment[]
  alerts        Alert[]
  likeReviews   UserLikeReview[]
  taggedComment UserTaggedComment[]
}

model Review {
  id         Int              @id @default(autoincrement())
  title      String
  content    String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  movieTitle String
  posterPath String
  rating     Float
  writerId   Int
  writer     User             @relation(fields: [writerId], references: [id])
  comments   Comment[]
  likeUsers  UserLikeReview[]
}

model UserLikeReview {
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  reviewId Int
  review   Review @relation(fields: [reviewId], references: [id])

  @@id([userId, reviewId])
}

model UserTaggedComment {
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
}

model Profile {
  id     Int     @id @default(autoincrement())
  email  String? @unique
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

model Genre {
  id   Int    @id
  name String
}

model Comment {
  id         Int                 @id @default(autoincrement())
  content    String
  reviewId   Int
  review     Review              @relation(fields: [reviewId], references: [id])
  writerId   Int
  writer     User                @relation(fields: [writerId], references: [id])
  alerts     Alert[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  taggedUser UserTaggedComment[]
}

model Alert {
  id        Int       @id @default(autoincrement())
  type      AlertType
  message   String
  check     Boolean   @default(false)
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  commentId Int?
  comment   Comment?  @relation(fields: [commentId], references: [id])
  createdAt DateTime  @default(now())
}

enum AlertType {
  LIKE
  COMMENT
}

enum Social {
  GITHUB
  GOOGLE
}
